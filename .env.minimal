# Shared Context MCP Server - Minimal Configuration
# Quick start template with only essential variables
#
# Usage: cp .env.minimal .env
# Then: Generate secure keys using commands below

# ============================================================================
# üîí SECURITY REQUIRED - Generate unique values before use
# ============================================================================

# Generate with: openssl rand -base64 32
API_KEY=REPLACE_WITH_openssl_rand_base64_32

# Generate with: openssl rand -base64 32
JWT_SECRET_KEY=REPLACE_WITH_openssl_rand_base64_32

# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
JWT_ENCRYPTION_KEY=REPLACE_WITH_python_fernet_generate_key

# Web Dashboard Admin Password (REQUIRED for dashboard access)
ADMIN_PASSWORD=REPLACE_WITH_your_secure_admin_password

# ============================================================================
# ‚öôÔ∏è BASIC CONFIG - Usually defaults work fine
# ============================================================================

# Database location
DATABASE_PATH=./chat_history.db

# Server configuration
HTTP_PORT=23456
LOG_LEVEL=INFO
ENVIRONMENT=development
DEBUG=false

# MCP client connection (hostname clients use to reach server)
MCP_CLIENT_HOST=localhost
# Server transport configuration
MCP_TRANSPORT=http

# CORS origins (use * for development, restrict for production)
CORS_ORIGINS=*

# WebSocket port (for real-time updates)
WEBSOCKET_PORT=34567

# ============================================================================
# üîÑ QUICK SETUP COMMANDS
# ============================================================================
#
# 1. Copy this template:
#    cp .env.minimal .env
#
# 2. Generate secure keys:
#    API_KEY=$(openssl rand -base64 32)
#    JWT_SECRET_KEY=$(openssl rand -base64 32)
#    JWT_ENCRYPTION_KEY=$(python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")
#
# 3. Update .env file with generated keys
#
# 4. Start server:
#    uv run python -m shared_context_server.scripts.cli
#    or: docker compose up -d
#
