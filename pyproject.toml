[project]
name = "shared-context-server"
version = "1.0.2"
description = "Shared Context MCP Server for multi-agent collaboration"
authors = [
    {name = "Shared Context Server Team"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
dependencies = [
    "fastmcp>=2.11.3",
    "aiosqlite>=0.19.0",
    "rapidfuzz>=3.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "typing-extensions>=4.0.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.35.0",
    "websockets>=13.0",
    "watchdog>=6.0.0",
    "PyJWT>=2.8.0",
    "requests>=2.31.0",
    "cryptography>=3.4.8",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    "sqlalchemy>=2.0.43",
    "greenlet>=3.2.4",
    "mcpsock>=0.1.5",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.25.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
postgresql = [
    "asyncpg>=0.29.0",
]
mysql = [
    "aiomysql>=0.2.0",
]
all-databases = [
    "asyncpg>=0.29.0",
    "aiomysql>=0.2.0",
]

[project.scripts]
shared-context-server = "shared_context_server.scripts.cli:main"

[project.urls]
Homepage = "https://github.com/shared-context-server/shared-context-server"
Documentation = "https://shared-context-server.readthedocs.io"
Repository = "https://github.com/shared-context-server/shared-context-server.git"
Issues = "https://github.com/shared-context-server/shared-context-server/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/shared_context_server"]

[tool.hatch.build.targets.wheel.force-include]
"database_sqlite.sql" = "database_sqlite.sql"
"database_mysql.sql" = "database_mysql.sql"
"database_postgresql.sql" = "database_postgresql.sql"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/database_sqlite.sql",
    "/database_mysql.sql",
    "/database_postgresql.sql",
    "LICENSE",
    "README.md",
    "CHANGELOG.md",
]

# ============================================================================
# RUFF CONFIGURATION
# ============================================================================

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9+
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # flake8-eradicate
    "RET",  # flake8-return
    "TRY",  # tryceratops
    "PERF", # Perflint
]
ignore = [
    "E501",   # Line too long, handled by black
    "B008",   # Do not perform function calls in argument defaults
    "C901",   # Function is too complex
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY300", # Consider moving this statement to an `else` block
    "ARG002", # Unused method argument
    "PTH123", # Path.open should be used instead of built-in open
    "SIM108", # Use ternary operator instead of if-else-block
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert detected
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "FBT",    # Boolean trap
    "PLR2004", # Magic value used in comparison
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.lint.isort]
known-first-party = ["shared_context_server"]

# ============================================================================
# MYPY CONFIGURATION
# ============================================================================

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
    "aiosqlite.*",
    "rapidfuzz.*",
    "uvloop.*",
    "mcp.*",
    "mcpsock.*",
]
ignore_missing_imports = true

# Optional WebSocket development modules
[[tool.mypy.overrides]]
module = [
    "shared_context_server.websocket_server",
    "shared_context_server.scripts.dev_with_websocket",
]
ignore_errors = true

# ============================================================================
# PYTEST CONFIGURATION
# ============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "-n=auto",                    # Parallel execution with auto CPU detection
    "--tb=short",                 # Shorter traceback format
    "-q",                         # Quiet output
    "--color=yes",                # Force color output
    "--show-capture=no",          # Don't show captured stdout/stderr by default
    "--durations=5",
]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "behavioral: marks tests as behavioral/end-to-end tests",
    "flaky: marks tests as potentially flaky",
    "no_websocket_mock: marks tests to skip the global WebSocket notification mock",
    "database: marks tests that require database access",
    "memory: marks tests related to memory operations",
    "sqlalchemy: marks tests that require SQLAlchemy backend (USE_SQLALCHEMY=true)",
    "aiosqlite: marks tests specific to aiosqlite backend (USE_SQLALCHEMY=false)",
    # Test Architecture & Lifecycle
    "singleton: marks tests that validate singleton patterns and lifecycle",
    "auth: marks tests related to authentication and authorization",
    "security: marks tests that validate security controls",
    "isolation: marks tests that validate test isolation patterns",
    # Feature Organization
    "core: marks tests for core server functionality",
    "tools: marks tests for MCP tools implementation",
    "websocket: marks tests for WebSocket functionality",
    "search: marks tests for search and context functionality",
    # Quality Assurance
    "smoke: marks basic smoke tests for quick validation",
    "regression: marks tests that prevent known regressions",
    "edge_case: marks tests that cover edge cases and error conditions",
]
norecursedirs = [".git", ".tox", "dist", "build", "south_migrations"]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/conftest.py",
    "*/__pycache__/*",
    "src/shared_context_server/scripts/dev.py",
    "src/shared_context_server/scripts/dev_with_websocket.py",
    "src/shared_context_server/websocket_server.py",
]

[tool.coverage.report]
fail_under = 84
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[dependency-groups]
dev = [
    "build>=1.3.0",
    "mcp>=1.12.4",
    "mypy>=1.17.1",
    "pip-audit>=2.6.0",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.8.0",
    "ruff>=0.12.8",
    "types-requests>=2.32.4.20250809",
]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.8.0",
    "httpx>=0.25.0",
]

# ============================================================================
