name: Build and Publish Docker Image

# Trigger the workflow on:
# - Git tags starting with 'v' (e.g., v1.0.0, v1.2.3-beta)
# - GitHub releases
# - Manual dispatch
# - Pushes to main branch (for latest tag)
on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for the image'
        required: false
        default: 'manual'

# Environment variables used across all jobs
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    # Required permissions for GHCR publishing
    permissions:
      contents: read      # Access repository contents
      packages: write     # Push to GitHub Container Registry
      attestations: write # Generate build attestations
      id-token: write     # Required for attestations

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up QEMU for multi-platform builds
      # This enables emulation of different CPU architectures
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 3: Set up Docker Buildx
      # BuildKit builder with multi-platform support and advanced features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          use: true

      # Step 4: Log in to GitHub Container Registry
      # Uses the built-in GITHUB_TOKEN for authentication
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Extract metadata for tags and labels
      # Automatically generates appropriate tags based on git events
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            prefix=
            suffix=
          tags: |
            # Semantic versioning tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Branch-based tags
            type=ref,event=branch
            type=ref,event=pr
            # Latest for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Manual workflow tag
            type=raw,value={{inputs.tag}},enable=${{ github.event_name == 'workflow_dispatch' }}
          labels: |
            org.opencontainers.image.title=Shared Context MCP Server
            org.opencontainers.image.description=Centralized memory store for multi-agent AI collaboration
            org.opencontainers.image.vendor=Shared Context Server
            org.opencontainers.image.licenses=MIT

      # Step 6: Build and push Docker image
      # Multi-platform build with caching for performance
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # GitHub Actions cache for faster subsequent builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build arguments for better reproducibility
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Step 7: Generate build attestation
      # Creates SLSA provenance for supply chain security
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        if: github.event_name != 'pull_request'
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      # Step 8: Output build summary
      - name: Image build summary
        run: |
          echo "## 🐳 Docker Image Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Tags:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
